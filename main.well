~var:main {

          asm~ struc sockaddr_in
          asm~ .sin_family: resw 1
          asm~ .sin_port: resw 1
          asm~ .sin_addr: resd 1
          asm~ .sin_zero: resq 1
          asm~ endstruc

          asm~ str: db "%s", 10, 0

          string~ test = 'test'

          string~ sock_error = 'ERROR:: could not create socket'
          string~ bind_error = 'ERROR:: could not bind adress'

          int~ REUSED_ENABLED = 1

          int~ AF_INET = 2
          int~ SO_REUSE = 2
          int~ SOCK_STRE = 1
          int~ SOL_SOCK = 1
          int~ SOCK_NONBL = 2048

          string~ ip_addr = '0.0.0.0'
          int~ port = 8080

          asm~ server_addr:
          asm~ istruc sockaddr_in
          asm~ at sockaddr_in.sin_family, dw 0
          asm~ at sockaddr_in.sin_port, dw 0
          asm~ at sockaddr_in.sin_addr, dd 0
          asm~ at sockaddr_in.sin_zero, dq 0
          asm~ iend

          asm~ section .bss
          asm~ server_sock: resq 1

}

~func:listen_ {

              move~ [server_sock], rdi
              move~ 50, rsi
              call~ listen

}

~func:bind_fin {

               ~if(rax == 0)
                       asm~ ret
               end

               ~if(rax != 0)
                       move~ str, r10
                       move~ bind_error, r11
                       call~ util.ret_fail
               end

}

~func:check_res_bind {

                move~ port, rdi
                call~ htons
                move~ rax, [server_addr + sockaddr_in.sin_addr]

                move~ ip_addr, rdi
                move~ server_addr + sockaddr_in.sin_addr, rsi
                call~ inet_aton

                ~if(rax != 0)
                        move~ [server_sock], rdi
                        move~ server_addr, rsi
                        move~ 16, rdx
                        call~ bind

                        call~ bind_fin
                        asm~ ret
                end
                ~if(rax == 0)
                      move~ str, r10
                      move~ sock_error, r11
                      call~ util.ret_fail
                end

}

~func:sock_init {


                // socket(AF_INTET, SOCK_STRE, 0)
                move~ AF_INET, rdi
                move~ SOCK_STRE, rsi
                move~ SOCK_NONBL, rsi
                move~ 0, rdx
                call~ socket
                // server_sock = socket ^
                move~ rax, [server_sock]

                move~ [server_sock], rdi
                move~ SOL_SOCK, rsi
                move~ SO_REUSE, rdx
                move~ REUSED_ENABLED, rcx
                move~ 4, r8
                call~ setsockopt

                ~if(rax > 0)
                    // goto check_res
                    asm~ ret
                end
                ~if(rax < 0)
                        move~ str, r10
                        move~ sock_error, r11
                        call~ util.ret_fail
                        // return~ 0
                end

}

~func:main {

           asm~ extern printf

           asm~ extern socket
           asm~ extern setsockopt
           asm~ extern htons
           asm~ extern inet_aton
           asm~ extern bind
           asm~ extern listen

           push~ rbp

           move~ str, r10
           move~ test, r11
           call~ util.prints

           call~ sock_init
           call~ check_res_bind

           return~ 0

}
